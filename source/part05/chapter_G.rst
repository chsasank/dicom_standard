.. _chapter_G:

Encapsulated RLE Compressed Images (Normative)
==============================================

.. _sect_G.1:

Summary
-------

This annex describes how to apply RLE Image Compression to an image or
an individual frame of a multi-frame image. This method can be used for
any image, independent of the values of the data elements that describe
the image (i.e., Photometric Interpretation (0028,0004) and Bits Stored
(0028,0101)).

RLE Image Compression consists of the following steps:

1. The image is converted to a sequence of Composite Pixel Codes (see ).

2. The Composite Pixel Codes are used to generate a set of Byte Segments
   (see `Byte Segments <#sect_G.2>`__).

3. Each Byte Segment is RLE compressed to produce a RLE Segment (see
   `Organization of RLE Compressed Frame <#sect_G.4>`__).

4. The RLE Header is appended in front of the concatenated RLE Segments
   (see `RLE Header Format <#sect_G.5>`__).

.. _sect_G.2:

Byte Segments
-------------

A Byte Segment is a series of bytes generated by decomposing the
Composite Pixel Code (see ).

If the Composite Pixel Code is not an integral number of bytes in size,
sufficient Most Significant zero bits are added to make it an integral
byte size. This is known as the Padded Composite Pixel Code.

The first Segment is generated by stripping off the most significant
byte of each Padded Composite Pixel Code and ordering these bytes
sequentially. The second Segment is generated by repeating this process
on the stripped Padded Composite Pixel Code continuing until the last
Pixel Segment is generated by ordering the least significant byte of
each Padded Component Pixel Code sequentially.

.. note::

   1. If Photometric Interpretation (0028, 0004) equals RGB and Bits
      Allocated equals 8, then three Segments are generated. The first
      one holds all the Red values, the second all the Green values, and
      the third all the Blue values.

   2. The use of separate segments implies that the Planar Configuration
      (0028,0006) could theoretically be 1 for RLE compressed images,
      but for consistency with other Encapsulated (compressed) Transfer
      Syntaxes and restrictions on Planar Configuration in many IODs, it
      may be 0 unless constrained by the IOD.

.. _sect_G.3:

The RLE Algorithm
-----------------

The RLE algorithm described in this section is used to compress Byte
Segments into RLE Segments. There is a one-to-one correspondence between
Byte Segments and RLE Segments. Each RLE segment must be an even number
of bytes or padded at its end with zero to make it even.

.. _sect_G.3.1:

The RLE Encoder
~~~~~~~~~~~~~~~

A stream of identical bytes (Replicate Run) is encoded as a two-byte
code:

-  < -count + 1 > <byte value>, where

   -  count = the number of bytes in the run, and

   -  2 <= count <= 128

and a non-repetitive octet-stream (Literal Run) is encoded as:

-  < count - 1 > <Literal octet-stream>, where

   -  count = number of bytes in the octet-stream, and

   -  1 <= count <= 128.

The value of -128 may not be used to prefix a byte value.

.. note::

   It is common to encode a 2-byte repeat run as a Replicate Run except
   when preceded and followed by a Literal Run, in which case it's best
   to merge the three runs into a Literal Run.

Three-byte repeats shall be encoded as Replicate Runs. Each row of the
image shall be encoded separately and not cross a row boundary.

.. _sect_G.3.2:

The RLE Decoder
~~~~~~~~~~~~~~~

Pseudo code for the RLE decoder is shown below:

-  Loop until the number of output bytes equals the uncompressed segment
   size

   -  Read the next source byte into n

   -  If n> =0 and n <= 127 then

      -  output the next n+1 bytes literally

   -  Elseif n <= - 1 and n >= -127 then

      -  output the next byte -n+1 times

   -  Elseif n = - 128 then

      -  output nothing

   -  Endif

-  Endloop

.. _sect_G.4:

Organization of RLE Compressed Frame
------------------------------------

The RLE Segments are ordered as described in `Byte
Segments <#sect_G.2>`__. They are preceded by the RLE Header, which
contains offsets to the start of each RLE Segment. The RLE Header is
described in G.5.

The first RLE Segment immediately follows the RLE Header and the
remaining RLE Segments immediately follow each other. This is
illustrated in the diagram below.

.. table:: Organization of RLE Compressed Frame

   +---------------+
   | Header        |
   +---------------+
   | RLE Segment 1 |
   +---------------+
   | RLE Segment 2 |
   +---------------+
   | **. . .**     |
   +---------------+
   | **. . .**     |
   +---------------+
   | RLE Segment n |
   +---------------+

.. _sect_G.5:

RLE Header Format
-----------------

The RLE Header contains the number of RLE Segments for the image, and
the starting offset of each of the RLE Segments. Each of these numbers
is represented by a UL (unsigned long) value stored in little-endian
format. The RLE Header is 16 long words in length. This allows it to
describe a compressed image with up to 15 RLE Segments. All unused
segments offsets shall be set to zero.

Each of the starting locations for the RLE Segments are byte offsets
relative to the beginning of the RLE Header. Since the RLE Header is 16
unsigned longs or 64 bytes, the offset of RLE Segment One is 64.

The following diagram illustrates the ordering of the offsets within the
RLE Header.

.. table:: Ordering of the Offsets Within the RLE Header

   +------------------------------+
   | number of RLE Segments       |
   +------------------------------+
   | offset of RLE Segment 1 = 64 |
   +------------------------------+
   | offset of RLE Segment 2      |
   +------------------------------+
   | **. . .**                    |
   +------------------------------+
   | **. . .**                    |
   +------------------------------+
   | offset of RLE Segment n      |
   +------------------------------+
   | 0                            |
   +------------------------------+
   | 0                            |
   +------------------------------+
   | 0                            |
   +------------------------------+

.. _sect_G.6:

Example of Elements For An Encoded YCbCr RLE Three-frame Image with Basic Offset Table
--------------------------------------------------------------------------------------

`table_title <#table_G.6-1>`__ is an example of encoding of RLE
Compressed Frames (described in `Organization of RLE Compressed
Frame <#sect_G.4>`__) with the basic offset table.
`table_title <#table_G.6-2>`__ is an example of Item Value data for one
frame.

.. table:: Example of Elements for an Encoded YCbCr RLE Three-Frame
Image with Basic Offset Table

   +-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+
   | **    | **    | *     | *     |       |       |       |       |       |       |
   | Pixel | Value | *Data | *Data |       |       |       |       |       |       |
   | Data  | R     | El    | Elem  |       |       |       |       |       |       |
   | El    | epres | ement | ent** |       |       |       |       |       |       |
   | ement | entat | Len   |       |       |       |       |       |       |       |
   | Tag** | ion** | gth** |       |       |       |       |       |       |       |
   +=======+=======+=======+=======+=======+=======+=======+=======+=======+=======+
   | (     | OB    | 0000H | FFFF  | (     | 0000  | 0000  | (     | 0000  | RLE   |
   | 7FE0, |       |       | FFFFH | FFFE, | 000CH | 0000H | FFFE, | 02C8H | Compr |
   | 0010) |       |       | unde  | E000) |       | 0000  | E000) |       | essed |
   | with  |       |       | fined |       |       | 02D0H |       |       | Frame |
   | VR of |       |       | l     |       |       | 0000  |       |       |       |
   | OB    |       |       | ength |       |       | 0642H |       |       |       |
   +-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+
   | 4     | 2     | 2     | 4     | 4     | 4     | 000CH | 4     | 4     | 02C8H |
   | bytes | bytes | bytes | bytes | bytes | bytes | bytes | bytes | bytes | bytes |
   +-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+

.. table:: Example of Elements for an Encoded YCbCr RLE Three-Frame
Image with Basic Offset Table (continued)

   +-------+-------+-------+-------+-------+-------+-------+-------+
   | *     |       |       |       |       |       |       |       |
   | *Data |       |       |       |       |       |       |       |
   | El    |       |       |       |       |       |       |       |
   | ement |       |       |       |       |       |       |       |
   | C     |       |       |       |       |       |       |       |
   | ontin |       |       |       |       |       |       |       |
   | ued** |       |       |       |       |       |       |       |
   +=======+=======+=======+=======+=======+=======+=======+=======+
   | (     | 0000  | RLE   | (     | 0000  | RLE   | (     | 0000  |
   | FFFE, | 036AH | Compr | FFFE, | 0BC8H | Compr | FFFE, | 0000H |
   | E000) |       | essed | E000) |       | essed | E0DD) |       |
   |       |       | Frame |       |       | Frame |       |       |
   +-------+-------+-------+-------+-------+-------+-------+-------+
   | 4     | 2     | 036AH | 4     | 4     | 0BC8H | 4     | 4     |
   | bytes | bytes | bytes | bytes | bytes | bytes | bytes | bytes |
   +-------+-------+-------+-------+-------+-------+-------+-------+

.. table:: Example of Encoded YCbCr RLE Compressed Frame Item Value

   +------------+---------------------+---------------------+----------+
   | **Offset** | **Data**            | **Description of    |          |
   |            |                     | Data**              |          |
   +============+=====================+=====================+==========+
   | 0000 0000H | 0000 0003H          | number of RLE       | (Header) |
   |            |                     | Segments            |          |
   +------------+---------------------+---------------------+----------+
   |            | 0000 0040H          | location of RLE     |          |
   |            |                     | Segment 1 (Y        |          |
   |            |                     | component)          |          |
   +------------+---------------------+---------------------+----------+
   |            | 0000 0140H          | location of RLE     |          |
   |            |                     | Segment 2           |          |
   |            |                     | (C\ :sub:`B`        |          |
   |            |                     | component)          |          |
   +------------+---------------------+---------------------+----------+
   |            | 0000 01C0H          | location of RLE     |          |
   |            |                     | Segment 3           |          |
   |            |                     | (C\ :sub:`R`        |          |
   |            |                     | component)          |          |
   +------------+---------------------+---------------------+----------+
   |            | 0000 0000H          |                     |          |
   +------------+---------------------+---------------------+----------+
   |            | …..                 |                     |          |
   +------------+---------------------+---------------------+----------+
   |            | …..                 |                     |          |
   +------------+---------------------+---------------------+----------+
   |            | 0000 0000H          |                     |          |
   +------------+---------------------+---------------------+----------+
   | 0000 0040H | Y - RLE Segment     |                     | (DATA)   |
   |            | Data                |                     |          |
   +------------+---------------------+---------------------+----------+
   | 0000 0140H | C\ :sub:`B` - RLE   |                     | (DATA)   |
   |            | Segment Data        |                     |          |
   +------------+---------------------+---------------------+----------+
   | 0000 01C0H | C\ :sub:`R` - RLE   |                     | (DATA)   |
   |            | Segment Data        |                     |          |
   +------------+---------------------+---------------------+----------+

